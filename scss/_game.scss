
@mixin calc-grid-row($index, $class, $type) {
	@if ($type == height) and ($index > 0) {
		.row-#{$class}-#{$index} {
			height: percentage(($index / $grid-rows));
		}
	}
	@if ($type == vh) and ($index > 0) {
		.row-#{$class}-vh-#{$index} {
			height: $index / $grid-rows * 100 + 0vh;
		}
	}
	@if ($type == push) and ($index > 0) {
		.row-#{$class}-push-#{$index} {
			top: percentage(($index / $grid-rows));
		}
	}
	@if ($type == push) and ($index == 0) {
		.row-#{$class}-push-0 {
			top: auto;
		}
	}
	@if ($type == pull) and ($index > 0) {
		.row-#{$class}-pull-#{$index} {
			bottom: percentage(($index / $grid-rows));
		}
	}
	@if ($type == pull) and ($index == 0) {
		.row-#{$class}-pull-0 {
			bottom: auto;
		}
	}
	@if ($type == offset) {
		.row-#{$class}-offset-#{$index} {
			margin-top: percentage(($index / $grid-rows));
		}
	}
}

@mixin loop-grid-rows($rows, $class, $type) {
	@for $i from 0 through $rows {
		@include calc-grid-row($i, $class, $type);
	}
}

@mixin make-grid-rows($i: 1, $list: ".row-xs-#{$i}, .row-sm-#{$i}, .row-md-#{$i}, .row-lg-#{$i}") {
	@for $i from (1 + 1) through $grid-rows {
		$list: "#{$list}, .row-xs-#{$i}, .row-sm-#{$i}, .row-md-#{$i}, .row-lg-#{$i}";
	}
	#{$list} {
		// Prevent rows from collapsing when empty
		min-width: 1px;

		&:not(.row):not(.container):not(.container-fluid) {
			// Inner gutter via padding
			padding-top:  ceil(($grid-gutter-height / 2));
			padding-bottom: floor(($grid-gutter-height / 2));

			/*			> * {
							vertical-align: middle;
						}*/
		}
	}
}

@mixin make-grid-height($class) {
	@include loop-grid-rows($grid-rows, $class, height);
	@include loop-grid-rows($grid-rows, $class, pull);
	@include loop-grid-rows($grid-rows, $class, push);
	@include loop-grid-rows($grid-rows, $class, offset);
	@include loop-grid-rows($grid-rows, $class, vh);
}

@mixin make-float($class: "") {
	@if $class != "" {
		$class: "-#{$class}";
	}
	#{".float#{$class}-right"} {
		float: right !important;
	}
	#{".float#{$class}-left"} {
		float: left !important;
	}
	#{".float#{$class}-none"} {
		float: none !important;
	}
}

@include make-grid-rows;
@include make-grid-height(xs);
@include make-float;

@media (min-width: $screen-sm-min) {
	@include make-grid-height(sm);
	@include make-float(sm);
}

@media (min-width: $screen-md-min) {
	@include make-grid-height(md);
	@include make-float(md);
}

@media (min-width: $screen-lg-min) {
	@include make-grid-height(lg);
	@include make-float(lg);
}

.row-hnb {
	#{".relief + .relief"} {
		border-left: none;
	}
}

#{".row + .row-vnb .relief"} {
	border-top: none;
}

.btn-inline {
	display: inline-block;
	vertical-align: text-top;
}

.small-caps {
	font-variant: small-caps !important;
}

.game-container {
	height: 100vh;
	min-height: $line-height-computed * ($grid-rows - 1) + 0px;
	max-height: 100vh;
	@extend .container-fluid;
	@extend .row-md-vh-24;
}

.module {
	overflow: auto;
}

.resource {
	vertical-align: middle;
	margin: .1em;
	cursor: default;

	@each $c in $resource-colors {
		&.resource-#{nth($c, 1)} {
			@include relief(nth($c, 2));
		}
	}

	&, > .resource-value, > .resource-name {
		display: inline;
	}

	> .resource-value, > .resource-name {
		padding: {
			left: 2px;
			right: 2px;
		}
	}

	> .resource-value {
		background: rgba(black, .25);
		> .resource-value-current {
			font-weight: 600;
		}

		> .resource-value-total {
			&::before {
				content: '/';
			}
		}
	}

	> .resource-name {
		font-weight: 600;
	}
}

.relief-bloc {
	@include relief;
	margin: .1em;
	font-variant: small-caps;
	padding: 0 4px;
	vertical-align: middle;
	cursor: default;

	&, > .relief-img, > .relief-text {
		display: inline;
	}

	> .relief-img {
		height: 1.25em;
		width: auto;
		margin-left: -4px;
		vertical-align: text-top;
		@include user-select(none);
	}

	> .relief-text {
		padding-left: 4px;
		font-variant: small-caps;
		vertical-align: top;
	}

	&.reduced {
		padding-right: 0;

		> .relief-text {
			display: none;
		}

		&.onhover {
			&:hover {
				padding-right: 4px;

				> .relief-text {
					display: inline;
				}
			}
		}
	}
}

.player {
	border-left: 3px solid transparent;

	> .relief-img {
		max-width: 1.25em;
	}
}

.color-bloc {
	display: inline-block;
    width: 1em;
    height: 1em;
}

.faction {
	> .color-bloc {
		display: inline-block;
		width: 1.25em;
	}
}

.date {
	width: $date-width;
	color: rgba(black, 0.3);
	text-shadow: none;
	cursor: default;
}

.mission {

	.panel-heading {
		padding-right: 0;
		border-left: 2px solid transparent;

		> .mission-title {
			display: inline-block;
			max-width: 100%;
			overflow: hidden;
			text-overflow: ellipsis;
			word-wrap: break-word;
			vertical-align: middle;
		}

		> .mission-title-right {
			position: relative;
			display: inline-block;
			max-width: 100%;
			width: 100%;

			> .mission-open-box {
				position: absolute;
				right: 0;
				bottom: 0;

				> .mission-open {
					&:before {
						content: "\e252";
					}
				}
			}
		}
	}

	&.reduced {
		.panel-heading {

			> .mission-title {
				display: inline-block;
				width: calc(100% - #{$mission-heading-right-width});
				white-space: nowrap;
			}

			> .mission-title-right {
				float: right;
				width: $mission-heading-right-width;
				text-align: right;

				> .player {
					@extend .reduced;
				}

				> .mission-open-box {
					position: initial;

					> .mission-open{
						&:before {
							content: "\e251";
						}
					}
				}
			}
		}
	}

	.panel-body {
		max-height: 200px;
		overflow: auto;
	}

	.mission-state {
		@extend .label;
		font-variant: small-caps;
		cursor: default;
	}

	&.mission-state {
		&-progress {
			.panel-heading {
				border-left-color: $brand-warning;
			}
			.mission-state {
				@extend .label-warning;
			}
		}

		&-success {
			.panel-heading {
				border-left-color: $brand-success;
			}
			.mission-state {
				@extend .label-success;
			}
		}

		&-fail {
			.panel-heading {
				border-left-color: $brand-danger;
			}
			.mission-state {
				@extend .label-danger;
			}
		}
	}
}

.notification-group {

	> .notification {
		white-space: nowrap;

		> .content {
			display: inline-block;
			white-space: normal;
			word-break: break-word;
			width: calc(100% - #{$date-width});
		}

		> .date {
			display: inline-block;
			vertical-align: top;
			text-align: right;
		}
	}
}

.chat {
	> .chat-post {
		white-space: nowrap;

		> .chat-post-content {
			display: inline-block;
			white-space: normal;
			word-break: break-word;
			width: calc(100% - #{$date-width});
		}
		> .date {
			display: inline-block;
			vertical-align: top;
			text-align: right;
		}
	}
}